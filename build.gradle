def project_dir = "C:/Users/frogm/Desktop/TerraNexCorp"

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'
//apply plugin: 'curseforge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

//def version_mod = version_mods;
def version_mc = "${config.version_mc}"
def version_mod = "[${config.version_mc}]-${config.version_mod}"
group = "${config.group_name}"
archivesBaseName = "[${config.version_mc}]-TerraNexCorp-${config.version_mod}"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${config.version_mc}-${config.version_forge}"
    runDir = "run"

    replace "@VERSION@", version_mod
    replaceIn "FTBUFinals.java"
}

repositories {
    maven { 
    	// The repo from which to get waila
        name "Mobius Repo"
        url "https://www.mobiusstrip.eu/maven/"
    }
    maven { 
    	// the repo from which to get NEI and stuff 
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
}




dependencies {
    compile fileTree(dir: "eclipse/mods", include: '*.jar')
    //compile files(project_dir + "/Exported/TerraNexCorp-" + version_mc + "-" + version_mod + "-dev.jar")
	compile "codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.127:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.4.95:dev"
	compile "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10"
    compile files("libs/[1.7.10]TerraFirmaCraft-deobf-0.79.29.jar")
}

sourceSets {
    main {
        java {
            srcDir project_dir + archivesBaseName + "/src/main/java"
        }
        resources {
            srcDir project_dir + archivesBaseName + "/src/main/resources"
        }
        output.resourcesDir = output.classesDir
    }
}

tasks.withType(Jar) {
    destinationDir = file(project_dir + "/Exported/")
}

processResources{
	// First we just copy in the mcmod.info file
	from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.prop'

        // replaces
        expand ([
            'mod_version': project.config.mod_version,
            'tfc_version': project.config.tfc_version,
            'minecraft_version': project.config.minecraft_version,
        ])
    }
    // copy everything else, that we didn't copy before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.prop'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

build.dependsOn deobfJar
build.dependsOn sourceJar
